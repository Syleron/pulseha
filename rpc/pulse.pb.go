// PulseHA - HA Cluster Daemon
// Copyright (C) 2017-2021  Andrew Zak <andrew@linux.com>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.5.0
// source: rpc/pulse.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogsRequest_Level int32

const (
	LogsRequest_INFO    LogsRequest_Level = 0
	LogsRequest_WARNING LogsRequest_Level = 1
	LogsRequest_ERROR   LogsRequest_Level = 2
	LogsRequest_DEBUG   LogsRequest_Level = 3
)

// Enum value maps for LogsRequest_Level.
var (
	LogsRequest_Level_name = map[int32]string{
		0: "INFO",
		1: "WARNING",
		2: "ERROR",
		3: "DEBUG",
	}
	LogsRequest_Level_value = map[string]int32{
		"INFO":    0,
		"WARNING": 1,
		"ERROR":   2,
		"DEBUG":   3,
	}
)

func (x LogsRequest_Level) Enum() *LogsRequest_Level {
	p := new(LogsRequest_Level)
	*p = x
	return p
}

func (x LogsRequest_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogsRequest_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_pulse_proto_enumTypes[0].Descriptor()
}

func (LogsRequest_Level) Type() protoreflect.EnumType {
	return &file_rpc_pulse_proto_enumTypes[0]
}

func (x LogsRequest_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogsRequest_Level.Descriptor instead.
func (LogsRequest_Level) EnumDescriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{18, 0}
}

type MemberStatus_Status int32

const (
	MemberStatus_ACTIVE       MemberStatus_Status = 0 // We are active and responsible for live services
	MemberStatus_LEAVING      MemberStatus_Status = 1 // ??
	MemberStatus_PASSIVE      MemberStatus_Status = 2 // okay and waiting to become active
	MemberStatus_UNAVAILABLE  MemberStatus_Status = 3 // dead
	MemberStatus_SUSPICIOUS   MemberStatus_Status = 4 // potentially dead but given the benefit of the doubt.
	MemberStatus_MONITORING   MemberStatus_Status = 5 // Node is permanently passive and monitoring
	MemberStatus_UNCONFIGURED MemberStatus_Status = 6 // Node is currently in an un-configured state
)

// Enum value maps for MemberStatus_Status.
var (
	MemberStatus_Status_name = map[int32]string{
		0: "ACTIVE",
		1: "LEAVING",
		2: "PASSIVE",
		3: "UNAVAILABLE",
		4: "SUSPICIOUS",
		5: "MONITORING",
		6: "UNCONFIGURED",
	}
	MemberStatus_Status_value = map[string]int32{
		"ACTIVE":       0,
		"LEAVING":      1,
		"PASSIVE":      2,
		"UNAVAILABLE":  3,
		"SUSPICIOUS":   4,
		"MONITORING":   5,
		"UNCONFIGURED": 6,
	}
)

func (x MemberStatus_Status) Enum() *MemberStatus_Status {
	p := new(MemberStatus_Status)
	*p = x
	return p
}

func (x MemberStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemberStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_pulse_proto_enumTypes[1].Descriptor()
}

func (MemberStatus_Status) Type() protoreflect.EnumType {
	return &file_rpc_pulse_proto_enumTypes[1]
}

func (x MemberStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MemberStatus_Status.Descriptor instead.
func (MemberStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{25, 0}
}

type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Our List of Members
	Memberlist []*MemberlistMember `protobuf:"bytes,1,rep,name=memberlist,proto3" json:"memberlist,omitempty"`
	// When the node went active
	ActiveTime string `protobuf:"bytes,2,opt,name=ActiveTime,proto3" json:"ActiveTime,omitempty"`
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{0}
}

func (x *HealthCheckRequest) GetMemberlist() []*MemberlistMember {
	if x != nil {
		return x.Memberlist
	}
	return nil
}

func (x *HealthCheckRequest) GetActiveTime() string {
	if x != nil {
		return x.ActiveTime
	}
	return ""
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score int32 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{1}
}

func (x *HealthCheckResponse) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	BindIp     string `protobuf:"bytes,2,opt,name=bind_ip,json=bindIp,proto3" json:"bind_ip,omitempty"`
	BindPort   string `protobuf:"bytes,3,opt,name=bind_port,json=bindPort,proto3" json:"bind_port,omitempty"`
	Ip         string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Port       string `protobuf:"bytes,5,opt,name=port,proto3" json:"port,omitempty"`
	Replicated bool   `protobuf:"varint,6,opt,name=replicated,proto3" json:"replicated,omitempty"`
	Config     []byte `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`
	Token      string `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	CaCrt      string `protobuf:"bytes,9,opt,name=ca_crt,json=caCrt,proto3" json:"ca_crt,omitempty"`
	CaKey      string `protobuf:"bytes,10,opt,name=ca_key,json=caKey,proto3" json:"ca_key,omitempty"`
	Uid        string `protobuf:"bytes,12,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{2}
}

func (x *JoinRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *JoinRequest) GetBindIp() string {
	if x != nil {
		return x.BindIp
	}
	return ""
}

func (x *JoinRequest) GetBindPort() string {
	if x != nil {
		return x.BindPort
	}
	return ""
}

func (x *JoinRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *JoinRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *JoinRequest) GetReplicated() bool {
	if x != nil {
		return x.Replicated
	}
	return false
}

func (x *JoinRequest) GetConfig() []byte {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *JoinRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JoinRequest) GetCaCrt() string {
	if x != nil {
		return x.CaCrt
	}
	return ""
}

func (x *JoinRequest) GetCaKey() string {
	if x != nil {
		return x.CaKey
	}
	return ""
}

func (x *JoinRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type JoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Config    []byte `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	CaCrt     string `protobuf:"bytes,4,opt,name=ca_crt,json=caCrt,proto3" json:"ca_crt,omitempty"`
	CaKey     string `protobuf:"bytes,5,opt,name=ca_key,json=caKey,proto3" json:"ca_key,omitempty"`
	ErrorCode int32  `protobuf:"varint,6,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *JoinResponse) Reset() {
	*x = JoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinResponse) ProtoMessage() {}

func (x *JoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinResponse.ProtoReflect.Descriptor instead.
func (*JoinResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{3}
}

func (x *JoinResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *JoinResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *JoinResponse) GetConfig() []byte {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *JoinResponse) GetCaCrt() string {
	if x != nil {
		return x.CaCrt
	}
	return ""
}

func (x *JoinResponse) GetCaKey() string {
	if x != nil {
		return x.CaKey
	}
	return ""
}

func (x *JoinResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type ConfigSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Config     []byte `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Replicated bool   `protobuf:"varint,3,opt,name=replicated,proto3" json:"replicated,omitempty"`
}

func (x *ConfigSyncRequest) Reset() {
	*x = ConfigSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSyncRequest) ProtoMessage() {}

func (x *ConfigSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSyncRequest.ProtoReflect.Descriptor instead.
func (*ConfigSyncRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigSyncRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ConfigSyncRequest) GetConfig() []byte {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ConfigSyncRequest) GetReplicated() bool {
	if x != nil {
		return x.Replicated
	}
	return false
}

type ConfigSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *ConfigSyncResponse) Reset() {
	*x = ConfigSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSyncResponse) ProtoMessage() {}

func (x *ConfigSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSyncResponse.ProtoReflect.Descriptor instead.
func (*ConfigSyncResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigSyncResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConfigSyncResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ConfigSyncResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type LeaveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Replicated bool   `protobuf:"varint,2,opt,name=replicated,proto3" json:"replicated,omitempty"`
	Hostname   string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *LeaveRequest) Reset() {
	*x = LeaveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveRequest) ProtoMessage() {}

func (x *LeaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveRequest.ProtoReflect.Descriptor instead.
func (*LeaveRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{6}
}

func (x *LeaveRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LeaveRequest) GetReplicated() bool {
	if x != nil {
		return x.Replicated
	}
	return false
}

func (x *LeaveRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type LeaveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *LeaveResponse) Reset() {
	*x = LeaveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveResponse) ProtoMessage() {}

func (x *LeaveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveResponse.ProtoReflect.Descriptor instead.
func (*LeaveResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{7}
}

func (x *LeaveResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *LeaveResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LeaveResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type RemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Hostname   string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Replicated bool   `protobuf:"varint,3,opt,name=replicated,proto3" json:"replicated,omitempty"`
	ErrorCode  int32  `protobuf:"varint,4,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *RemoveRequest) Reset() {
	*x = RemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRequest) ProtoMessage() {}

func (x *RemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRequest.ProtoReflect.Descriptor instead.
func (*RemoveRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RemoveRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *RemoveRequest) GetReplicated() bool {
	if x != nil {
		return x.Replicated
	}
	return false
}

func (x *RemoveRequest) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type RemoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Hostname  string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ErrorCode int32  `protobuf:"varint,4,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *RemoveResponse) Reset() {
	*x = RemoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveResponse) ProtoMessage() {}

func (x *RemoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveResponse.ProtoReflect.Descriptor instead.
func (*RemoveResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{9}
}

func (x *RemoveResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemoveResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RemoveResponse) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *RemoveResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type PromoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Member    string `protobuf:"bytes,2,opt,name=member,proto3" json:"member,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *PromoteRequest) Reset() {
	*x = PromoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteRequest) ProtoMessage() {}

func (x *PromoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteRequest.ProtoReflect.Descriptor instead.
func (*PromoteRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{10}
}

func (x *PromoteRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PromoteRequest) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *PromoteRequest) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type PromoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *PromoteResponse) Reset() {
	*x = PromoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteResponse) ProtoMessage() {}

func (x *PromoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteResponse.ProtoReflect.Descriptor instead.
func (*PromoteResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{11}
}

func (x *PromoteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PromoteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PromoteResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type MakePassiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Member    string `protobuf:"bytes,2,opt,name=member,proto3" json:"member,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *MakePassiveRequest) Reset() {
	*x = MakePassiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakePassiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakePassiveRequest) ProtoMessage() {}

func (x *MakePassiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakePassiveRequest.ProtoReflect.Descriptor instead.
func (*MakePassiveRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{12}
}

func (x *MakePassiveRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MakePassiveRequest) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *MakePassiveRequest) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type MakePassiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *MakePassiveResponse) Reset() {
	*x = MakePassiveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakePassiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakePassiveResponse) ProtoMessage() {}

func (x *MakePassiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakePassiveResponse.ProtoReflect.Descriptor instead.
func (*MakePassiveResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{13}
}

func (x *MakePassiveResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MakePassiveResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MakePassiveResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type UpIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Iface   string   `protobuf:"bytes,2,opt,name=iface,proto3" json:"iface,omitempty"`
	Ips     []string `protobuf:"bytes,3,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *UpIpRequest) Reset() {
	*x = UpIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpIpRequest) ProtoMessage() {}

func (x *UpIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpIpRequest.ProtoReflect.Descriptor instead.
func (*UpIpRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{14}
}

func (x *UpIpRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpIpRequest) GetIface() string {
	if x != nil {
		return x.Iface
	}
	return ""
}

func (x *UpIpRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type UpIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *UpIpResponse) Reset() {
	*x = UpIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpIpResponse) ProtoMessage() {}

func (x *UpIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpIpResponse.ProtoReflect.Descriptor instead.
func (*UpIpResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{15}
}

func (x *UpIpResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpIpResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpIpResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type DownIpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Iface   string   `protobuf:"bytes,2,opt,name=iface,proto3" json:"iface,omitempty"`
	Ips     []string `protobuf:"bytes,3,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *DownIpRequest) Reset() {
	*x = DownIpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownIpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownIpRequest) ProtoMessage() {}

func (x *DownIpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownIpRequest.ProtoReflect.Descriptor instead.
func (*DownIpRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{16}
}

func (x *DownIpRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DownIpRequest) GetIface() string {
	if x != nil {
		return x.Iface
	}
	return ""
}

func (x *DownIpRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type DownIpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *DownIpResponse) Reset() {
	*x = DownIpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownIpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownIpResponse) ProtoMessage() {}

func (x *DownIpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownIpResponse.ProtoReflect.Descriptor instead.
func (*DownIpResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{17}
}

func (x *DownIpResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DownIpResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DownIpResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type LogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string            `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Node    string            `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	Level   LogsRequest_Level `protobuf:"varint,3,opt,name=level,proto3,enum=proto.LogsRequest_Level" json:"level,omitempty"`
}

func (x *LogsRequest) Reset() {
	*x = LogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsRequest) ProtoMessage() {}

func (x *LogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsRequest.ProtoReflect.Descriptor instead.
func (*LogsRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{18}
}

func (x *LogsRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogsRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *LogsRequest) GetLevel() LogsRequest_Level {
	if x != nil {
		return x.Level
	}
	return LogsRequest_INFO
}

type LogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *LogsResponse) Reset() {
	*x = LogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsResponse) ProtoMessage() {}

func (x *LogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsResponse.ProtoReflect.Descriptor instead.
func (*LogsResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{19}
}

func (x *LogsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *LogsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogsResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type DescribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	CpuUsage     int32  `protobuf:"varint,2,opt,name=cpuUsage,proto3" json:"cpuUsage,omitempty"`
	MemUsage     int32  `protobuf:"varint,3,opt,name=memUsage,proto3" json:"memUsage,omitempty"`
	Uid          string `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	DiskUsage    int32  `protobuf:"varint,5,opt,name=diskUsage,proto3" json:"diskUsage,omitempty"`
	Uptime       string `protobuf:"bytes,6,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Status       string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Latency      string `protobuf:"bytes,8,opt,name=latency,proto3" json:"latency,omitempty"`
	Hostname     string `protobuf:"bytes,9,opt,name=hostname,proto3" json:"hostname,omitempty"`
	BindAddress  string `protobuf:"bytes,10,opt,name=bindAddress,proto3" json:"bindAddress,omitempty"`
	LastReceived string `protobuf:"bytes,11,opt,name=lastReceived,proto3" json:"lastReceived,omitempty"`
}

func (x *DescribeRequest) Reset() {
	*x = DescribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRequest) ProtoMessage() {}

func (x *DescribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRequest.ProtoReflect.Descriptor instead.
func (*DescribeRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{20}
}

func (x *DescribeRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DescribeRequest) GetCpuUsage() int32 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *DescribeRequest) GetMemUsage() int32 {
	if x != nil {
		return x.MemUsage
	}
	return 0
}

func (x *DescribeRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DescribeRequest) GetDiskUsage() int32 {
	if x != nil {
		return x.DiskUsage
	}
	return 0
}

func (x *DescribeRequest) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

func (x *DescribeRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DescribeRequest) GetLatency() string {
	if x != nil {
		return x.Latency
	}
	return ""
}

func (x *DescribeRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DescribeRequest) GetBindAddress() string {
	if x != nil {
		return x.BindAddress
	}
	return ""
}

func (x *DescribeRequest) GetLastReceived() string {
	if x != nil {
		return x.LastReceived
	}
	return ""
}

type DescribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *DescribeResponse) Reset() {
	*x = DescribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeResponse) ProtoMessage() {}

func (x *DescribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeResponse.ProtoReflect.Descriptor instead.
func (*DescribeResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{21}
}

func (x *DescribeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DescribeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DescribeResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type VoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *VoteRequest) Reset() {
	*x = VoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteRequest) ProtoMessage() {}

func (x *VoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteRequest.ProtoReflect.Descriptor instead.
func (*VoteRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{22}
}

func (x *VoteRequest) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VoteRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type VoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *VoteResponse) Reset() {
	*x = VoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteResponse) ProtoMessage() {}

func (x *VoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteResponse.ProtoReflect.Descriptor instead.
func (*VoteResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{23}
}

func (x *VoteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VoteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VoteResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type MemberlistMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname     string              `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Status       MemberStatus_Status `protobuf:"varint,2,opt,name=status,proto3,enum=proto.MemberStatus_Status" json:"status,omitempty"`
	LastReceived string              `protobuf:"bytes,3,opt,name=lastReceived,proto3" json:"lastReceived,omitempty"`
	Latency      string              `protobuf:"bytes,4,opt,name=latency,proto3" json:"latency,omitempty"`
	Score        int32               `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *MemberlistMember) Reset() {
	*x = MemberlistMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberlistMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberlistMember) ProtoMessage() {}

func (x *MemberlistMember) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberlistMember.ProtoReflect.Descriptor instead.
func (*MemberlistMember) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{24}
}

func (x *MemberlistMember) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *MemberlistMember) GetStatus() MemberStatus_Status {
	if x != nil {
		return x.Status
	}
	return MemberStatus_ACTIVE
}

func (x *MemberlistMember) GetLastReceived() string {
	if x != nil {
		return x.LastReceived
	}
	return ""
}

func (x *MemberlistMember) GetLatency() string {
	if x != nil {
		return x.Latency
	}
	return ""
}

func (x *MemberlistMember) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type MemberStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status MemberStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.MemberStatus_Status" json:"status,omitempty"`
}

func (x *MemberStatus) Reset() {
	*x = MemberStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberStatus) ProtoMessage() {}

func (x *MemberStatus) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberStatus.ProtoReflect.Descriptor instead.
func (*MemberStatus) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{25}
}

func (x *MemberStatus) GetStatus() MemberStatus_Status {
	if x != nil {
		return x.Status
	}
	return MemberStatus_ACTIVE
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindIp   string `protobuf:"bytes,1,opt,name=bind_ip,json=bindIp,proto3" json:"bind_ip,omitempty"`
	BindPort string `protobuf:"bytes,2,opt,name=bind_port,json=bindPort,proto3" json:"bind_port,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{26}
}

func (x *CreateRequest) GetBindIp() string {
	if x != nil {
		return x.BindIp
	}
	return ""
}

func (x *CreateRequest) GetBindPort() string {
	if x != nil {
		return x.BindPort
	}
	return ""
}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	Token     string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{27}
}

func (x *CreateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *CreateResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindIp string `protobuf:"bytes,3,opt,name=bind_ip,json=bindIp,proto3" json:"bind_ip,omitempty"`
}

func (x *CertRequest) Reset() {
	*x = CertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertRequest) ProtoMessage() {}

func (x *CertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertRequest.ProtoReflect.Descriptor instead.
func (*CertRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{28}
}

func (x *CertRequest) GetBindIp() string {
	if x != nil {
		return x.BindIp
	}
	return ""
}

type CertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *CertResponse) Reset() {
	*x = CertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertResponse) ProtoMessage() {}

func (x *CertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertResponse.ProtoReflect.Descriptor instead.
func (*CertResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{29}
}

func (x *CertResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CertResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CertResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type GroupNewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GroupNewRequest) Reset() {
	*x = GroupNewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupNewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupNewRequest) ProtoMessage() {}

func (x *GroupNewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupNewRequest.ProtoReflect.Descriptor instead.
func (*GroupNewRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{30}
}

func (x *GroupNewRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GroupNewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *GroupNewResponse) Reset() {
	*x = GroupNewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupNewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupNewResponse) ProtoMessage() {}

func (x *GroupNewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupNewResponse.ProtoReflect.Descriptor instead.
func (*GroupNewResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{31}
}

func (x *GroupNewResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GroupNewResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GroupNewResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type GroupDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GroupDeleteRequest) Reset() {
	*x = GroupDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDeleteRequest) ProtoMessage() {}

func (x *GroupDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDeleteRequest.ProtoReflect.Descriptor instead.
func (*GroupDeleteRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{32}
}

func (x *GroupDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GroupDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *GroupDeleteResponse) Reset() {
	*x = GroupDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDeleteResponse) ProtoMessage() {}

func (x *GroupDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDeleteResponse.ProtoReflect.Descriptor instead.
func (*GroupDeleteResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{33}
}

func (x *GroupDeleteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GroupDeleteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GroupDeleteResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type GroupAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ips  []string `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *GroupAddRequest) Reset() {
	*x = GroupAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAddRequest) ProtoMessage() {}

func (x *GroupAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAddRequest.ProtoReflect.Descriptor instead.
func (*GroupAddRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{34}
}

func (x *GroupAddRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupAddRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type GroupAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *GroupAddResponse) Reset() {
	*x = GroupAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAddResponse) ProtoMessage() {}

func (x *GroupAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAddResponse.ProtoReflect.Descriptor instead.
func (*GroupAddResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{35}
}

func (x *GroupAddResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GroupAddResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GroupAddResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type GroupRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ips  []string `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *GroupRemoveRequest) Reset() {
	*x = GroupRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRemoveRequest) ProtoMessage() {}

func (x *GroupRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRemoveRequest.ProtoReflect.Descriptor instead.
func (*GroupRemoveRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{36}
}

func (x *GroupRemoveRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupRemoveRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type GroupRemoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *GroupRemoveResponse) Reset() {
	*x = GroupRemoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRemoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRemoveResponse) ProtoMessage() {}

func (x *GroupRemoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRemoveResponse.ProtoReflect.Descriptor instead.
func (*GroupRemoveResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{37}
}

func (x *GroupRemoveResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GroupRemoveResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GroupRemoveResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type GroupAssignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group     string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Interface string `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	Node      string `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *GroupAssignRequest) Reset() {
	*x = GroupAssignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupAssignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAssignRequest) ProtoMessage() {}

func (x *GroupAssignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAssignRequest.ProtoReflect.Descriptor instead.
func (*GroupAssignRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{38}
}

func (x *GroupAssignRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *GroupAssignRequest) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *GroupAssignRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

type GroupAssignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *GroupAssignResponse) Reset() {
	*x = GroupAssignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupAssignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAssignResponse) ProtoMessage() {}

func (x *GroupAssignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAssignResponse.ProtoReflect.Descriptor instead.
func (*GroupAssignResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{39}
}

func (x *GroupAssignResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GroupAssignResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GroupAssignResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type GroupUnassignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group     string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Interface string `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	Node      string `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *GroupUnassignRequest) Reset() {
	*x = GroupUnassignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupUnassignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupUnassignRequest) ProtoMessage() {}

func (x *GroupUnassignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupUnassignRequest.ProtoReflect.Descriptor instead.
func (*GroupUnassignRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{40}
}

func (x *GroupUnassignRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *GroupUnassignRequest) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *GroupUnassignRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

type GroupUnassignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *GroupUnassignResponse) Reset() {
	*x = GroupUnassignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupUnassignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupUnassignResponse) ProtoMessage() {}

func (x *GroupUnassignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupUnassignResponse.ProtoReflect.Descriptor instead.
func (*GroupUnassignResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{41}
}

func (x *GroupUnassignResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GroupUnassignResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GroupUnassignResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type GroupTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GroupTableRequest) Reset() {
	*x = GroupTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTableRequest) ProtoMessage() {}

func (x *GroupTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupTableRequest.ProtoReflect.Descriptor instead.
func (*GroupTableRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{42}
}

type GroupTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool        `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Row     []*GroupRow `protobuf:"bytes,3,rep,name=row,proto3" json:"row,omitempty"`
}

func (x *GroupTableResponse) Reset() {
	*x = GroupTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTableResponse) ProtoMessage() {}

func (x *GroupTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupTableResponse.ProtoReflect.Descriptor instead.
func (*GroupTableResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{43}
}

func (x *GroupTableResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GroupTableResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GroupTableResponse) GetRow() []*GroupRow {
	if x != nil {
		return x.Row
	}
	return nil
}

type GroupRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ip         []string `protobuf:"bytes,2,rep,name=ip,proto3" json:"ip,omitempty"`
	Nodes      []string `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Interfaces []string `protobuf:"bytes,4,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *GroupRow) Reset() {
	*x = GroupRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRow) ProtoMessage() {}

func (x *GroupRow) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRow.ProtoReflect.Descriptor instead.
func (*GroupRow) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{44}
}

func (x *GroupRow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupRow) GetIp() []string {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *GroupRow) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *GroupRow) GetInterfaces() []string {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{45}
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool         `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Row     []*StatusRow `protobuf:"bytes,3,rep,name=row,proto3" json:"row,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{46}
}

func (x *StatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StatusResponse) GetRow() []*StatusRow {
	if x != nil {
		return x.Row
	}
	return nil
}

type StatusRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname     string              `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ip           string              `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Latency      string              `protobuf:"bytes,3,opt,name=latency,proto3" json:"latency,omitempty"`
	Status       MemberStatus_Status `protobuf:"varint,4,opt,name=status,proto3,enum=proto.MemberStatus_Status" json:"status,omitempty"`
	LastReceived string              `protobuf:"bytes,5,opt,name=lastReceived,proto3" json:"lastReceived,omitempty"`
	Score        int32               `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *StatusRow) Reset() {
	*x = StatusRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRow) ProtoMessage() {}

func (x *StatusRow) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRow.ProtoReflect.Descriptor instead.
func (*StatusRow) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{47}
}

func (x *StatusRow) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *StatusRow) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *StatusRow) GetLatency() string {
	if x != nil {
		return x.Latency
	}
	return ""
}

func (x *StatusRow) GetStatus() MemberStatus_Status {
	if x != nil {
		return x.Status
	}
	return MemberStatus_ACTIVE
}

func (x *StatusRow) GetLastReceived() string {
	if x != nil {
		return x.LastReceived
	}
	return ""
}

func (x *StatusRow) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{48}
}

func (x *ConfigRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ConfigRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{49}
}

func (x *ConfigResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ConfigResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type TokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TokenRequest) Reset() {
	*x = TokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRequest) ProtoMessage() {}

func (x *TokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRequest.ProtoReflect.Descriptor instead.
func (*TokenRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{50}
}

type TokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	ErrorCode int32  `protobuf:"varint,4,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *TokenResponse) Reset() {
	*x = TokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenResponse) ProtoMessage() {}

func (x *TokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenResponse.ProtoReflect.Descriptor instead.
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{51}
}

func (x *TokenResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TokenResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TokenResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type PulseNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Action    string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	ErrorCode int32  `protobuf:"varint,4,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *PulseNetwork) Reset() {
	*x = PulseNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pulse_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulseNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulseNetwork) ProtoMessage() {}

func (x *PulseNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pulse_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulseNetwork.ProtoReflect.Descriptor instead.
func (*PulseNetwork) Descriptor() ([]byte, []int) {
	return file_rpc_pulse_proto_rawDescGZIP(), []int{52}
}

func (x *PulseNetwork) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PulseNetwork) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PulseNetwork) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PulseNetwork) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

var File_rpc_pulse_proto protoreflect.FileDescriptor

var file_rpc_pulse_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x61, 0x5f, 0x63, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x43, 0x72, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x63, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x61, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x0c, 0x4a, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x61, 0x5f, 0x63, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x43, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x61,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x4b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x65, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x66, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x64,
	0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x0d, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7e, 0x0a,
	0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x63, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x64, 0x0a, 0x12, 0x4d, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x67, 0x0a, 0x13, 0x4d, 0x61,
	0x6b, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x4f, 0x0a, 0x0b, 0x55, 0x70, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x70, 0x73, 0x22, 0x60, 0x0a, 0x0c, 0x55, 0x70, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x0d, 0x44, 0x6f, 0x77, 0x6e, 0x49, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x66, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0x62, 0x0a, 0x0e, 0x44, 0x6f, 0x77,
	0x6e, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa1, 0x01,
	0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x34, 0x0a, 0x05, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10,
	0x03, 0x22, 0x60, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6d, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0x64, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x41, 0x0a, 0x0b, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x60,
	0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xb6, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0c, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x71,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x45, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x53, 0x50, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x04, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12,
	0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x10,
	0x06, 0x22, 0x45, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x69, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x78, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x26, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x70, 0x22, 0x60, 0x0a, 0x0c, 0x43, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x25, 0x0a, 0x0f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x65, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x37, 0x0a, 0x0f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0x64, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x0a, 0x12, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0x67, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x5c, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x67,
	0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5e, 0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x69, 0x0a, 0x15, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6b, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x77, 0x52,
	0x03, 0x72, 0x6f, 0x77, 0x22, 0x64, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x77,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x6f, 0x77,
	0x52, 0x03, 0x72, 0x6f, 0x77, 0x22, 0xbf, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x37, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x62, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x77, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x78, 0x0a,
	0x0c, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x32, 0xb4, 0x08, 0x0a, 0x03, 0x43, 0x4c, 0x49, 0x12,
	0x2f, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x54, 0x4c, 0x53, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x50, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x75, 0x6c, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x3b, 0x0a, 0x08, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x8d,
	0x05, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0b, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x4d, 0x61, 0x6b, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x09, 0x42, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x49, 0x50, 0x12, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x42, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77,
	0x6e, 0x49, 0x50, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x08, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06,
	0x5a, 0x04, 0x72, 0x70, 0x63, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_pulse_proto_rawDescOnce sync.Once
	file_rpc_pulse_proto_rawDescData = file_rpc_pulse_proto_rawDesc
)

func file_rpc_pulse_proto_rawDescGZIP() []byte {
	file_rpc_pulse_proto_rawDescOnce.Do(func() {
		file_rpc_pulse_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_pulse_proto_rawDescData)
	})
	return file_rpc_pulse_proto_rawDescData
}

var file_rpc_pulse_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_rpc_pulse_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_rpc_pulse_proto_goTypes = []interface{}{
	(LogsRequest_Level)(0),        // 0: proto.LogsRequest.Level
	(MemberStatus_Status)(0),      // 1: proto.MemberStatus.Status
	(*HealthCheckRequest)(nil),    // 2: proto.HealthCheckRequest
	(*HealthCheckResponse)(nil),   // 3: proto.HealthCheckResponse
	(*JoinRequest)(nil),           // 4: proto.JoinRequest
	(*JoinResponse)(nil),          // 5: proto.JoinResponse
	(*ConfigSyncRequest)(nil),     // 6: proto.ConfigSyncRequest
	(*ConfigSyncResponse)(nil),    // 7: proto.ConfigSyncResponse
	(*LeaveRequest)(nil),          // 8: proto.LeaveRequest
	(*LeaveResponse)(nil),         // 9: proto.LeaveResponse
	(*RemoveRequest)(nil),         // 10: proto.RemoveRequest
	(*RemoveResponse)(nil),        // 11: proto.RemoveResponse
	(*PromoteRequest)(nil),        // 12: proto.PromoteRequest
	(*PromoteResponse)(nil),       // 13: proto.PromoteResponse
	(*MakePassiveRequest)(nil),    // 14: proto.MakePassiveRequest
	(*MakePassiveResponse)(nil),   // 15: proto.MakePassiveResponse
	(*UpIpRequest)(nil),           // 16: proto.UpIpRequest
	(*UpIpResponse)(nil),          // 17: proto.UpIpResponse
	(*DownIpRequest)(nil),         // 18: proto.DownIpRequest
	(*DownIpResponse)(nil),        // 19: proto.DownIpResponse
	(*LogsRequest)(nil),           // 20: proto.LogsRequest
	(*LogsResponse)(nil),          // 21: proto.LogsResponse
	(*DescribeRequest)(nil),       // 22: proto.DescribeRequest
	(*DescribeResponse)(nil),      // 23: proto.DescribeResponse
	(*VoteRequest)(nil),           // 24: proto.VoteRequest
	(*VoteResponse)(nil),          // 25: proto.VoteResponse
	(*MemberlistMember)(nil),      // 26: proto.MemberlistMember
	(*MemberStatus)(nil),          // 27: proto.MemberStatus
	(*CreateRequest)(nil),         // 28: proto.CreateRequest
	(*CreateResponse)(nil),        // 29: proto.CreateResponse
	(*CertRequest)(nil),           // 30: proto.CertRequest
	(*CertResponse)(nil),          // 31: proto.CertResponse
	(*GroupNewRequest)(nil),       // 32: proto.GroupNewRequest
	(*GroupNewResponse)(nil),      // 33: proto.GroupNewResponse
	(*GroupDeleteRequest)(nil),    // 34: proto.GroupDeleteRequest
	(*GroupDeleteResponse)(nil),   // 35: proto.GroupDeleteResponse
	(*GroupAddRequest)(nil),       // 36: proto.GroupAddRequest
	(*GroupAddResponse)(nil),      // 37: proto.GroupAddResponse
	(*GroupRemoveRequest)(nil),    // 38: proto.GroupRemoveRequest
	(*GroupRemoveResponse)(nil),   // 39: proto.GroupRemoveResponse
	(*GroupAssignRequest)(nil),    // 40: proto.GroupAssignRequest
	(*GroupAssignResponse)(nil),   // 41: proto.GroupAssignResponse
	(*GroupUnassignRequest)(nil),  // 42: proto.GroupUnassignRequest
	(*GroupUnassignResponse)(nil), // 43: proto.GroupUnassignResponse
	(*GroupTableRequest)(nil),     // 44: proto.GroupTableRequest
	(*GroupTableResponse)(nil),    // 45: proto.GroupTableResponse
	(*GroupRow)(nil),              // 46: proto.GroupRow
	(*StatusRequest)(nil),         // 47: proto.StatusRequest
	(*StatusResponse)(nil),        // 48: proto.StatusResponse
	(*StatusRow)(nil),             // 49: proto.StatusRow
	(*ConfigRequest)(nil),         // 50: proto.ConfigRequest
	(*ConfigResponse)(nil),        // 51: proto.ConfigResponse
	(*TokenRequest)(nil),          // 52: proto.TokenRequest
	(*TokenResponse)(nil),         // 53: proto.TokenResponse
	(*PulseNetwork)(nil),          // 54: proto.PulseNetwork
}
var file_rpc_pulse_proto_depIdxs = []int32{
	26, // 0: proto.HealthCheckRequest.memberlist:type_name -> proto.MemberlistMember
	0,  // 1: proto.LogsRequest.level:type_name -> proto.LogsRequest.Level
	1,  // 2: proto.MemberlistMember.status:type_name -> proto.MemberStatus.Status
	1,  // 3: proto.MemberStatus.status:type_name -> proto.MemberStatus.Status
	46, // 4: proto.GroupTableResponse.row:type_name -> proto.GroupRow
	49, // 5: proto.StatusResponse.row:type_name -> proto.StatusRow
	1,  // 6: proto.StatusRow.status:type_name -> proto.MemberStatus.Status
	4,  // 7: proto.CLI.Join:input_type -> proto.JoinRequest
	8,  // 8: proto.CLI.Leave:input_type -> proto.LeaveRequest
	10, // 9: proto.CLI.Remove:input_type -> proto.RemoveRequest
	28, // 10: proto.CLI.Create:input_type -> proto.CreateRequest
	30, // 11: proto.CLI.TLS:input_type -> proto.CertRequest
	32, // 12: proto.CLI.NewGroup:input_type -> proto.GroupNewRequest
	34, // 13: proto.CLI.DeleteGroup:input_type -> proto.GroupDeleteRequest
	36, // 14: proto.CLI.GroupIPAdd:input_type -> proto.GroupAddRequest
	38, // 15: proto.CLI.GroupIPRemove:input_type -> proto.GroupRemoveRequest
	40, // 16: proto.CLI.GroupAssign:input_type -> proto.GroupAssignRequest
	42, // 17: proto.CLI.GroupUnassign:input_type -> proto.GroupUnassignRequest
	44, // 18: proto.CLI.GroupList:input_type -> proto.GroupTableRequest
	47, // 19: proto.CLI.Status:input_type -> proto.StatusRequest
	12, // 20: proto.CLI.Promote:input_type -> proto.PromoteRequest
	50, // 21: proto.CLI.Config:input_type -> proto.ConfigRequest
	52, // 22: proto.CLI.Token:input_type -> proto.TokenRequest
	54, // 23: proto.CLI.Network:input_type -> proto.PulseNetwork
	22, // 24: proto.CLI.Describe:input_type -> proto.DescribeRequest
	2,  // 25: proto.Server.HealthCheck:input_type -> proto.HealthCheckRequest
	4,  // 26: proto.Server.Join:input_type -> proto.JoinRequest
	6,  // 27: proto.Server.ConfigSync:input_type -> proto.ConfigSyncRequest
	8,  // 28: proto.Server.Leave:input_type -> proto.LeaveRequest
	10, // 29: proto.Server.Remove:input_type -> proto.RemoveRequest
	12, // 30: proto.Server.Promote:input_type -> proto.PromoteRequest
	14, // 31: proto.Server.MakePassive:input_type -> proto.MakePassiveRequest
	16, // 32: proto.Server.BringUpIP:input_type -> proto.UpIpRequest
	18, // 33: proto.Server.BringDownIP:input_type -> proto.DownIpRequest
	20, // 34: proto.Server.Logs:input_type -> proto.LogsRequest
	22, // 35: proto.Server.Describe:input_type -> proto.DescribeRequest
	5,  // 36: proto.CLI.Join:output_type -> proto.JoinResponse
	9,  // 37: proto.CLI.Leave:output_type -> proto.LeaveResponse
	11, // 38: proto.CLI.Remove:output_type -> proto.RemoveResponse
	29, // 39: proto.CLI.Create:output_type -> proto.CreateResponse
	31, // 40: proto.CLI.TLS:output_type -> proto.CertResponse
	33, // 41: proto.CLI.NewGroup:output_type -> proto.GroupNewResponse
	35, // 42: proto.CLI.DeleteGroup:output_type -> proto.GroupDeleteResponse
	37, // 43: proto.CLI.GroupIPAdd:output_type -> proto.GroupAddResponse
	39, // 44: proto.CLI.GroupIPRemove:output_type -> proto.GroupRemoveResponse
	41, // 45: proto.CLI.GroupAssign:output_type -> proto.GroupAssignResponse
	43, // 46: proto.CLI.GroupUnassign:output_type -> proto.GroupUnassignResponse
	45, // 47: proto.CLI.GroupList:output_type -> proto.GroupTableResponse
	48, // 48: proto.CLI.Status:output_type -> proto.StatusResponse
	13, // 49: proto.CLI.Promote:output_type -> proto.PromoteResponse
	51, // 50: proto.CLI.Config:output_type -> proto.ConfigResponse
	53, // 51: proto.CLI.Token:output_type -> proto.TokenResponse
	54, // 52: proto.CLI.Network:output_type -> proto.PulseNetwork
	23, // 53: proto.CLI.Describe:output_type -> proto.DescribeResponse
	3,  // 54: proto.Server.HealthCheck:output_type -> proto.HealthCheckResponse
	5,  // 55: proto.Server.Join:output_type -> proto.JoinResponse
	7,  // 56: proto.Server.ConfigSync:output_type -> proto.ConfigSyncResponse
	9,  // 57: proto.Server.Leave:output_type -> proto.LeaveResponse
	11, // 58: proto.Server.Remove:output_type -> proto.RemoveResponse
	13, // 59: proto.Server.Promote:output_type -> proto.PromoteResponse
	15, // 60: proto.Server.MakePassive:output_type -> proto.MakePassiveResponse
	17, // 61: proto.Server.BringUpIP:output_type -> proto.UpIpResponse
	19, // 62: proto.Server.BringDownIP:output_type -> proto.DownIpResponse
	21, // 63: proto.Server.Logs:output_type -> proto.LogsResponse
	23, // 64: proto.Server.Describe:output_type -> proto.DescribeResponse
	36, // [36:65] is the sub-list for method output_type
	7,  // [7:36] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_rpc_pulse_proto_init() }
func file_rpc_pulse_proto_init() {
	if File_rpc_pulse_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_pulse_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakePassiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakePassiveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownIpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownIpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberlistMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupNewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupNewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRemoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupAssignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupAssignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupUnassignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupUnassignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pulse_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulseNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_pulse_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_rpc_pulse_proto_goTypes,
		DependencyIndexes: file_rpc_pulse_proto_depIdxs,
		EnumInfos:         file_rpc_pulse_proto_enumTypes,
		MessageInfos:      file_rpc_pulse_proto_msgTypes,
	}.Build()
	File_rpc_pulse_proto = out.File
	file_rpc_pulse_proto_rawDesc = nil
	file_rpc_pulse_proto_goTypes = nil
	file_rpc_pulse_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CLIClient is the client API for CLI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CLIClient interface {
	// Join Cluster
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	// Leave Cluster
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
	// Remove from cluster
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
	// Create Cluster
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Create Certs
	TLS(ctx context.Context, in *CertRequest, opts ...grpc.CallOption) (*CertResponse, error)
	// Create floating ip group
	NewGroup(ctx context.Context, in *GroupNewRequest, opts ...grpc.CallOption) (*GroupNewResponse, error)
	// Delete floating ip group
	DeleteGroup(ctx context.Context, in *GroupDeleteRequest, opts ...grpc.CallOption) (*GroupDeleteResponse, error)
	// Add floating IP
	GroupIPAdd(ctx context.Context, in *GroupAddRequest, opts ...grpc.CallOption) (*GroupAddResponse, error)
	// Remove floating IP
	GroupIPRemove(ctx context.Context, in *GroupRemoveRequest, opts ...grpc.CallOption) (*GroupRemoveResponse, error)
	// Assign a group
	GroupAssign(ctx context.Context, in *GroupAssignRequest, opts ...grpc.CallOption) (*GroupAssignResponse, error)
	// Unassign a group
	GroupUnassign(ctx context.Context, in *GroupUnassignRequest, opts ...grpc.CallOption) (*GroupUnassignResponse, error)
	// Get group list
	GroupList(ctx context.Context, in *GroupTableRequest, opts ...grpc.CallOption) (*GroupTableResponse, error)
	// Pulse Status
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Promote a member
	Promote(ctx context.Context, in *PromoteRequest, opts ...grpc.CallOption) (*PromoteResponse, error)
	// Promote a member
	Config(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	// Generate new cluster token
	Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	// Perform network related actions
	Network(ctx context.Context, in *PulseNetwork, opts ...grpc.CallOption) (*PulseNetwork, error)
	// Get detailed information for a particular node
	Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error)
}

type cLIClient struct {
	cc grpc.ClientConnInterface
}

func NewCLIClient(cc grpc.ClientConnInterface) CLIClient {
	return &cLIClient{cc}
}

func (c *cLIClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/proto.CLI/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, "/proto.CLI/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/proto.CLI/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/proto.CLI/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) TLS(ctx context.Context, in *CertRequest, opts ...grpc.CallOption) (*CertResponse, error) {
	out := new(CertResponse)
	err := c.cc.Invoke(ctx, "/proto.CLI/TLS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) NewGroup(ctx context.Context, in *GroupNewRequest, opts ...grpc.CallOption) (*GroupNewResponse, error) {
	out := new(GroupNewResponse)
	err := c.cc.Invoke(ctx, "/proto.CLI/NewGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) DeleteGroup(ctx context.Context, in *GroupDeleteRequest, opts ...grpc.CallOption) (*GroupDeleteResponse, error) {
	out := new(GroupDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.CLI/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) GroupIPAdd(ctx context.Context, in *GroupAddRequest, opts ...grpc.CallOption) (*GroupAddResponse, error) {
	out := new(GroupAddResponse)
	err := c.cc.Invoke(ctx, "/proto.CLI/GroupIPAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) GroupIPRemove(ctx context.Context, in *GroupRemoveRequest, opts ...grpc.CallOption) (*GroupRemoveResponse, error) {
	out := new(GroupRemoveResponse)
	err := c.cc.Invoke(ctx, "/proto.CLI/GroupIPRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) GroupAssign(ctx context.Context, in *GroupAssignRequest, opts ...grpc.CallOption) (*GroupAssignResponse, error) {
	out := new(GroupAssignResponse)
	err := c.cc.Invoke(ctx, "/proto.CLI/GroupAssign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) GroupUnassign(ctx context.Context, in *GroupUnassignRequest, opts ...grpc.CallOption) (*GroupUnassignResponse, error) {
	out := new(GroupUnassignResponse)
	err := c.cc.Invoke(ctx, "/proto.CLI/GroupUnassign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) GroupList(ctx context.Context, in *GroupTableRequest, opts ...grpc.CallOption) (*GroupTableResponse, error) {
	out := new(GroupTableResponse)
	err := c.cc.Invoke(ctx, "/proto.CLI/GroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/proto.CLI/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Promote(ctx context.Context, in *PromoteRequest, opts ...grpc.CallOption) (*PromoteResponse, error) {
	out := new(PromoteResponse)
	err := c.cc.Invoke(ctx, "/proto.CLI/Promote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Config(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/proto.CLI/Config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/proto.CLI/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Network(ctx context.Context, in *PulseNetwork, opts ...grpc.CallOption) (*PulseNetwork, error) {
	out := new(PulseNetwork)
	err := c.cc.Invoke(ctx, "/proto.CLI/Network", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error) {
	out := new(DescribeResponse)
	err := c.cc.Invoke(ctx, "/proto.CLI/Describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CLIServer is the server API for CLI service.
type CLIServer interface {
	// Join Cluster
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	// Leave Cluster
	Leave(context.Context, *LeaveRequest) (*LeaveResponse, error)
	// Remove from cluster
	Remove(context.Context, *RemoveRequest) (*RemoveResponse, error)
	// Create Cluster
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Create Certs
	TLS(context.Context, *CertRequest) (*CertResponse, error)
	// Create floating ip group
	NewGroup(context.Context, *GroupNewRequest) (*GroupNewResponse, error)
	// Delete floating ip group
	DeleteGroup(context.Context, *GroupDeleteRequest) (*GroupDeleteResponse, error)
	// Add floating IP
	GroupIPAdd(context.Context, *GroupAddRequest) (*GroupAddResponse, error)
	// Remove floating IP
	GroupIPRemove(context.Context, *GroupRemoveRequest) (*GroupRemoveResponse, error)
	// Assign a group
	GroupAssign(context.Context, *GroupAssignRequest) (*GroupAssignResponse, error)
	// Unassign a group
	GroupUnassign(context.Context, *GroupUnassignRequest) (*GroupUnassignResponse, error)
	// Get group list
	GroupList(context.Context, *GroupTableRequest) (*GroupTableResponse, error)
	// Pulse Status
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Promote a member
	Promote(context.Context, *PromoteRequest) (*PromoteResponse, error)
	// Promote a member
	Config(context.Context, *ConfigRequest) (*ConfigResponse, error)
	// Generate new cluster token
	Token(context.Context, *TokenRequest) (*TokenResponse, error)
	// Perform network related actions
	Network(context.Context, *PulseNetwork) (*PulseNetwork, error)
	// Get detailed information for a particular node
	Describe(context.Context, *DescribeRequest) (*DescribeResponse, error)
}

// UnimplementedCLIServer can be embedded to have forward compatible implementations.
type UnimplementedCLIServer struct {
}

func (*UnimplementedCLIServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (*UnimplementedCLIServer) Leave(context.Context, *LeaveRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (*UnimplementedCLIServer) Remove(context.Context, *RemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (*UnimplementedCLIServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCLIServer) TLS(context.Context, *CertRequest) (*CertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TLS not implemented")
}
func (*UnimplementedCLIServer) NewGroup(context.Context, *GroupNewRequest) (*GroupNewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewGroup not implemented")
}
func (*UnimplementedCLIServer) DeleteGroup(context.Context, *GroupDeleteRequest) (*GroupDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedCLIServer) GroupIPAdd(context.Context, *GroupAddRequest) (*GroupAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupIPAdd not implemented")
}
func (*UnimplementedCLIServer) GroupIPRemove(context.Context, *GroupRemoveRequest) (*GroupRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupIPRemove not implemented")
}
func (*UnimplementedCLIServer) GroupAssign(context.Context, *GroupAssignRequest) (*GroupAssignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupAssign not implemented")
}
func (*UnimplementedCLIServer) GroupUnassign(context.Context, *GroupUnassignRequest) (*GroupUnassignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupUnassign not implemented")
}
func (*UnimplementedCLIServer) GroupList(context.Context, *GroupTableRequest) (*GroupTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupList not implemented")
}
func (*UnimplementedCLIServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedCLIServer) Promote(context.Context, *PromoteRequest) (*PromoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Promote not implemented")
}
func (*UnimplementedCLIServer) Config(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (*UnimplementedCLIServer) Token(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (*UnimplementedCLIServer) Network(context.Context, *PulseNetwork) (*PulseNetwork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Network not implemented")
}
func (*UnimplementedCLIServer) Describe(context.Context, *DescribeRequest) (*DescribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}

func RegisterCLIServer(s *grpc.Server, srv CLIServer) {
	s.RegisterService(&_CLI_serviceDesc, srv)
}

func _CLI_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Leave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_TLS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).TLS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/TLS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).TLS(ctx, req.(*CertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_NewGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).NewGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/NewGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).NewGroup(ctx, req.(*GroupNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).DeleteGroup(ctx, req.(*GroupDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_GroupIPAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GroupIPAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/GroupIPAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GroupIPAdd(ctx, req.(*GroupAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_GroupIPRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GroupIPRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/GroupIPRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GroupIPRemove(ctx, req.(*GroupRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_GroupAssign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupAssignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GroupAssign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/GroupAssign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GroupAssign(ctx, req.(*GroupAssignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_GroupUnassign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUnassignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GroupUnassign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/GroupUnassign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GroupUnassign(ctx, req.(*GroupUnassignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_GroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/GroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GroupList(ctx, req.(*GroupTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Promote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Promote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Promote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Promote(ctx, req.(*PromoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Config(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Token(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Network_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulseNetwork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Network(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Network",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Network(ctx, req.(*PulseNetwork))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CLI/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Describe(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CLI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CLI",
	HandlerType: (*CLIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _CLI_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _CLI_Leave_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _CLI_Remove_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CLI_Create_Handler,
		},
		{
			MethodName: "TLS",
			Handler:    _CLI_TLS_Handler,
		},
		{
			MethodName: "NewGroup",
			Handler:    _CLI_NewGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _CLI_DeleteGroup_Handler,
		},
		{
			MethodName: "GroupIPAdd",
			Handler:    _CLI_GroupIPAdd_Handler,
		},
		{
			MethodName: "GroupIPRemove",
			Handler:    _CLI_GroupIPRemove_Handler,
		},
		{
			MethodName: "GroupAssign",
			Handler:    _CLI_GroupAssign_Handler,
		},
		{
			MethodName: "GroupUnassign",
			Handler:    _CLI_GroupUnassign_Handler,
		},
		{
			MethodName: "GroupList",
			Handler:    _CLI_GroupList_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _CLI_Status_Handler,
		},
		{
			MethodName: "Promote",
			Handler:    _CLI_Promote_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _CLI_Config_Handler,
		},
		{
			MethodName: "Token",
			Handler:    _CLI_Token_Handler,
		},
		{
			MethodName: "Network",
			Handler:    _CLI_Network_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _CLI_Describe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pulse.proto",
}

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerClient interface {
	// Perform GRPC Health Check
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Join Cluster
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	// Sync Config
	ConfigSync(ctx context.Context, in *ConfigSyncRequest, opts ...grpc.CallOption) (*ConfigSyncResponse, error)
	// Leave Cluster
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
	// Remove from Cluster
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
	// Promote
	Promote(ctx context.Context, in *PromoteRequest, opts ...grpc.CallOption) (*PromoteResponse, error)
	// demote
	MakePassive(ctx context.Context, in *MakePassiveRequest, opts ...grpc.CallOption) (*MakePassiveResponse, error)
	// Bring up IP
	BringUpIP(ctx context.Context, in *UpIpRequest, opts ...grpc.CallOption) (*UpIpResponse, error)
	// Bring down IP
	BringDownIP(ctx context.Context, in *DownIpRequest, opts ...grpc.CallOption) (*DownIpResponse, error)
	// Bring down IP
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*LogsResponse, error)
	// Get detailed information for a particular node
	Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/proto.Server/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/proto.Server/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) ConfigSync(ctx context.Context, in *ConfigSyncRequest, opts ...grpc.CallOption) (*ConfigSyncResponse, error) {
	out := new(ConfigSyncResponse)
	err := c.cc.Invoke(ctx, "/proto.Server/ConfigSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, "/proto.Server/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/proto.Server/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Promote(ctx context.Context, in *PromoteRequest, opts ...grpc.CallOption) (*PromoteResponse, error) {
	out := new(PromoteResponse)
	err := c.cc.Invoke(ctx, "/proto.Server/Promote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) MakePassive(ctx context.Context, in *MakePassiveRequest, opts ...grpc.CallOption) (*MakePassiveResponse, error) {
	out := new(MakePassiveResponse)
	err := c.cc.Invoke(ctx, "/proto.Server/MakePassive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) BringUpIP(ctx context.Context, in *UpIpRequest, opts ...grpc.CallOption) (*UpIpResponse, error) {
	out := new(UpIpResponse)
	err := c.cc.Invoke(ctx, "/proto.Server/BringUpIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) BringDownIP(ctx context.Context, in *DownIpRequest, opts ...grpc.CallOption) (*DownIpResponse, error) {
	out := new(DownIpResponse)
	err := c.cc.Invoke(ctx, "/proto.Server/BringDownIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*LogsResponse, error) {
	out := new(LogsResponse)
	err := c.cc.Invoke(ctx, "/proto.Server/Logs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error) {
	out := new(DescribeResponse)
	err := c.cc.Invoke(ctx, "/proto.Server/Describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
type ServerServer interface {
	// Perform GRPC Health Check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Join Cluster
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	// Sync Config
	ConfigSync(context.Context, *ConfigSyncRequest) (*ConfigSyncResponse, error)
	// Leave Cluster
	Leave(context.Context, *LeaveRequest) (*LeaveResponse, error)
	// Remove from Cluster
	Remove(context.Context, *RemoveRequest) (*RemoveResponse, error)
	// Promote
	Promote(context.Context, *PromoteRequest) (*PromoteResponse, error)
	// demote
	MakePassive(context.Context, *MakePassiveRequest) (*MakePassiveResponse, error)
	// Bring up IP
	BringUpIP(context.Context, *UpIpRequest) (*UpIpResponse, error)
	// Bring down IP
	BringDownIP(context.Context, *DownIpRequest) (*DownIpResponse, error)
	// Bring down IP
	Logs(context.Context, *LogsRequest) (*LogsResponse, error)
	// Get detailed information for a particular node
	Describe(context.Context, *DescribeRequest) (*DescribeResponse, error)
}

// UnimplementedServerServer can be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (*UnimplementedServerServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedServerServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (*UnimplementedServerServer) ConfigSync(context.Context, *ConfigSyncRequest) (*ConfigSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigSync not implemented")
}
func (*UnimplementedServerServer) Leave(context.Context, *LeaveRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (*UnimplementedServerServer) Remove(context.Context, *RemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (*UnimplementedServerServer) Promote(context.Context, *PromoteRequest) (*PromoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Promote not implemented")
}
func (*UnimplementedServerServer) MakePassive(context.Context, *MakePassiveRequest) (*MakePassiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakePassive not implemented")
}
func (*UnimplementedServerServer) BringUpIP(context.Context, *UpIpRequest) (*UpIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BringUpIP not implemented")
}
func (*UnimplementedServerServer) BringDownIP(context.Context, *DownIpRequest) (*DownIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BringDownIP not implemented")
}
func (*UnimplementedServerServer) Logs(context.Context, *LogsRequest) (*LogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (*UnimplementedServerServer) Describe(context.Context, *DescribeRequest) (*DescribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_ConfigSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).ConfigSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/ConfigSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).ConfigSync(ctx, req.(*ConfigSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Leave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Promote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Promote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/Promote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Promote(ctx, req.(*PromoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_MakePassive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakePassiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).MakePassive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/MakePassive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).MakePassive(ctx, req.(*MakePassiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_BringUpIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).BringUpIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/BringUpIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).BringUpIP(ctx, req.(*UpIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_BringDownIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).BringDownIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/BringDownIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).BringDownIP(ctx, req.(*DownIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Logs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Logs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/Logs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Logs(ctx, req.(*LogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Describe(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Server_HealthCheck_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Server_Join_Handler,
		},
		{
			MethodName: "ConfigSync",
			Handler:    _Server_ConfigSync_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Server_Leave_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Server_Remove_Handler,
		},
		{
			MethodName: "Promote",
			Handler:    _Server_Promote_Handler,
		},
		{
			MethodName: "MakePassive",
			Handler:    _Server_MakePassive_Handler,
		},
		{
			MethodName: "BringUpIP",
			Handler:    _Server_BringUpIP_Handler,
		},
		{
			MethodName: "BringDownIP",
			Handler:    _Server_BringDownIP_Handler,
		},
		{
			MethodName: "Logs",
			Handler:    _Server_Logs_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Server_Describe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pulse.proto",
}
